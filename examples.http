### =============================================================================
### Basic HTTP Requests
### =============================================================================

### Simple GET request
GET http://localhost:8000/hello
Accept: application/json

### GET with slow response (test timeout handling)
GET http://localhost:8000/slow
Accept: application/json

### POST with JSON body
POST http://localhost:8000/echo
Content-Type: application/json

{
  "message": "Hello from hola.nvim!",
  "timestamp": "2025-01-01T00:00:00Z"
}

### =============================================================================
### Authentication Methods
### =============================================================================

### Basic Authentication (auto-encoded)
POST http://localhost:8000/secure
Authorization: Basic admin:secret
Accept: application/json

### Bearer Token Authentication
GET http://localhost:8000/bearer
Authorization: Bearer abc123-def456-ghi789
Accept: application/json

### API Key Authentication (Authorization header)
GET http://localhost:8000/apikey
Authorization: ApiKey secret-api-key-123
Accept: application/json

### API Key Authentication (X-API-Key header)
GET http://localhost:8000/apikey
X-API-Key: secret-api-key-123
Accept: application/json

### =============================================================================
### Environment Variables (env provider)
### Requires .env file or system environment variables
### =============================================================================

### Using environment variables in headers
GET http://localhost:8000/bearer
Authorization: Bearer {{env:API_TOKEN}}
X-Request-ID: {{env:REQUEST_ID}}
X-Environment: {{env:ENVIRONMENT}}
Accept: application/json

### =============================================================================
### HashiCorp Vault Integration (vault provider)
### Requires vault CLI and authentication
### =============================================================================

### Fetch secret from Vault and use in API request
GET http://localhost:8000/apikey
Authorization: ApiKey {{vault:secret/api#key}}
Accept: application/json

### =============================================================================
### OAuth 2.0 Client Credentials Flow (oauth provider)
### Requires oauth.toml configuration file
### Use with scripts/server.py for local testing
### =============================================================================

### OAuth with default provider
GET http://localhost:8000/oauth-test
Authorization: Bearer {{oauth:local_server}}
Accept: application/json

### OAuth with named provider (Auth0 style)
GET http://localhost:8000/oauth-test
Authorization: Bearer {{oauth:auth0_local}}
Accept: application/json

### OAuth with named provider (AWS Cognito style)
GET http://localhost:8000/oauth-test
Authorization: Bearer {{oauth:cognito_local}}
Accept: application/json

### =============================================================================
### Reference Aliases (refs provider)
### Requires refs file mapping aliases to provider references
### =============================================================================

### Using reference alias (COMMON_TOKEN -> env:API_TOKEN)
GET http://localhost:8000/bearer
Authorization: Bearer {{refs:COMMON_TOKEN}}
Accept: application/json

### =============================================================================
### Mixed Provider Usage
### =============================================================================

### Combining multiple providers in one request
POST http://localhost:8000/echo
Authorization: Bearer {{oauth:local_server}}
X-API-Key: {{env:API_KEY}}
X-Request-ID: {{refs:COMMON_HEADER}}
Content-Type: application/json

{
  "environment": "{{env:ENVIRONMENT}}",
  "version": "{{env:VERSION}}",
  "message": "Multi-provider example - OAuth + env + refs"
}
