### GET hello world
GET http://localhost:8000/hello
Accept: application/json

### GET slog endpoint
GET http://localhost:8000/slow
Accept: application/json

### POST echo endpoint
POST http://localhost:8000/echo
Accept: application/json

### POST basic auth endpoint (valid credentials)
POST http://localhost:8000/secure
Authorization: Basic admin:secret
Accept: application/json

### POST auth endpoint (valid incredentials)
POST http://localhost:8000/secure
Authorization: Basic admin:wrong-password
Accept: application/json

### GET auth bearer token (valid token)
GET http://localhost:8000/bearer
Authorization: Bearer abc123-def456-ghi789
Accept: application/json

### GET auth bearer token (vivalid token)
GET http://localhost:8000/bearer
Authorization: Bearer abc123-wrong-token
Accept: application/json

### GET auth API key (valid key)
GET http://localhost:8000/apikey
Authorization: ApiKey secret-api-key-123
Accept: application/json

### GET auth API key (invalid key)
GET http://localhost:8000/apikey
Authorization: ApiKey wrong-api-key
Accept: application/json

### GET auth with X-API-Key header
GET http://localhost:8000/apikey
X-API-Key: secret-api-key-123
Accept: application/json

### Create a new post
POST https://jsonplaceholder.typicode.com/posts
Content-Type: application/json
X-Custom-Header: MyValue

{"title": "hello"}

### Delete a post
DELETE https://jsonplaceholder.typicode.com/posts/1

### Slow response
GET https://fakeresponder.com/?sleep=1000

### Postman echo
POST https://postman-echo.com/post?hola=que&tal=true
Content-Type: application/json
Custom-Header: sardina

["lol"]

### Generate a password
POST https://api.malev.xyz/api/password

### =============================================================================
### OAuth 2.0 Testing (use with scripts/server.py and .env.oauth-test)
### =============================================================================

### OAuth Test - Generic Provider (Default Environment)
GET http://localhost:8000/oauth-test
Authorization: Bearer {{OAUTH_TOKEN}}
Accept: application/json

### OAuth Test - AWS Cognito Style
GET http://localhost:8000/oauth-test
Authorization: Bearer {{OAUTH_TOKEN_COGNITO}}
Accept: application/json

### OAuth Test - Auth0 Style
GET http://localhost:8000/oauth-test
Authorization: Bearer {{OAUTH_TOKEN_AUTH0}}
Accept: application/json

### OAuth Test - Apigee Style
GET http://localhost:8000/oauth-test
Authorization: Bearer {{OAUTH_TOKEN_APIGEE}}
Accept: application/json

### OAuth Test - Multi-Environment (Staging)
GET http://localhost:8000/oauth-test
Authorization: Bearer {{OAUTH_TOKEN_STAGING}}
Accept: application/json

### OAuth Test - Multi-Environment (Dev)
GET http://localhost:8000/oauth-test
Authorization: Bearer {{OAUTH_TOKEN_DEV}}
Accept: application/json

### OAuth Mixed with Traditional Variables
POST http://localhost:8000/echo
Authorization: Bearer {{OAUTH_TOKEN}}
X-API-Key: {{API_KEY}}
X-User-Email: {{USER_EMAIL}}
Content-Type: application/json

{
  "message": "Testing OAuth with traditional variables",
  "api_key": "{{API_KEY}}",
  "oauth_env": "default"
}

### OAuth Token in Request Body (GraphQL Example)
POST http://localhost:8000/echo
Content-Type: application/json

{
  "query": "{ user { name email } }",
  "variables": {},
  "extensions": {
    "authorization": "{{OAUTH_TOKEN_COGNITO}}"
  }
}

### OAuth Custom Headers
GET http://localhost:8000/oauth-test
Authorization: Bearer {{OAUTH_TOKEN_AUTH0}}
X-OAuth-Provider: auth0
X-Environment: production
Accept: application/json

